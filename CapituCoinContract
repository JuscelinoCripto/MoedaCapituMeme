// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";  
import "@openzeppelin/contracts/security/Pausable.sol";

contract CapituCoin is ERC20, ERC20Burnable, Ownable, Pausable {
    uint256 public constant INITIAL_SUPPLY = 10_000_000_000_000 * 10**18;  // 10 trilhões
    uint256 public constant MAX_SUPPLY = 10_000_000_000_000 * 10**18;      // Limite de fornecimento
    uint256 public tokensDistributed;

    uint256 public rewardRate = 100; // 1% de recompensa
    uint256 public monthlyRelease = 100_000_000 * 10**18;  // Valor de liberação mensal
    uint256 public lastReleaseTime;

    mapping(address => uint256) public stakedBalances;
    mapping(address => uint256) public stakingStart;
    mapping(address => uint256) public pendingRewards;
    uint256 public totalStaked;

    address[] public initialHolders;
    uint256[] public initialAllocations;

    event TokensStaked(address indexed user, uint256 amount);
    event TokensUnstaked(address indexed user, uint256 amount);
    event RewardsClaimed(address indexed user, uint256 amount);
    event TokensReleased(uint256 amount);
    event TokensBurned(uint256 amount);
    event RewardRateUpdated(uint256 newRate);
    event MonthlyReleaseExecuted(address indexed executor);

    // Construtor sem parâmetros; o Ownable receberá msg.sender como proprietário
    constructor() ERC20("CapituCoin", "CAPITU") Ownable(msg.sender) {
        lastReleaseTime = block.timestamp;
        _mint(msg.sender, INITIAL_SUPPLY);  // Mint inicial para o deployer (owner)
    }

    function stakeTokens(uint256 amount) external whenNotPaused {
        require(amount > 0, "Amount must be greater than 0");
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");

        claimRewards();

        _transfer(msg.sender, address(this), amount);
        stakedBalances[msg.sender] += amount;
        stakingStart[msg.sender] = block.timestamp;
        totalStaked += amount;

        emit TokensStaked(msg.sender, amount);
    }

    function unstakeTokens(uint256 amount) external whenNotPaused {
        require(amount > 0, "Amount must be greater than 0");
        require(stakedBalances[msg.sender] >= amount, "Insufficient staked balance");

        claimRewards();

        stakedBalances[msg.sender] -= amount;
        totalStaked -= amount;
        _transfer(address(this), msg.sender, amount);

        emit TokensUnstaked(msg.sender, amount);
    }

    function claimRewards() public whenNotPaused {
        uint256 rewards = calculateRewards(msg.sender);
        require(rewards > 0, "No rewards available");

        pendingRewards[msg.sender] = 0;
        stakingStart[msg.sender] = block.timestamp;
        _mint(msg.sender, rewards);

        emit RewardsClaimed(msg.sender, rewards);
    }

    function calculateRewards(address staker) public view returns (uint256) {
        uint256 stakingTime = block.timestamp - stakingStart[staker];
        uint256 rewards = (stakedBalances[staker] * rewardRate * stakingTime) / (365 days * 1e4);
        return rewards + pendingRewards[staker];
    }

    function releaseMonthlyTokens() external onlyOwner whenNotPaused {
        require(block.timestamp >= lastReleaseTime + 30 days, "Monthly tokens already released");
        require(totalSupply() + monthlyRelease <= MAX_SUPPLY, "Exceeds maximum supply");

        uint256 totalAllocation = 0;
        for (uint256 i = 0; i < initialHolders.length; i++) {
            uint256 allocation = (initialAllocations[i] * monthlyRelease) / INITIAL_SUPPLY;
            totalAllocation += allocation;
            _mint(initialHolders[i], allocation);
        }

        require(totalAllocation == monthlyRelease, "Token distribution mismatch");

        lastReleaseTime = block.timestamp;

        emit TokensReleased(monthlyRelease);
        emit MonthlyReleaseExecuted(msg.sender);
    }

    function burnTokens(uint256 amount) external onlyOwner {
        _burn(msg.sender, amount);
        emit TokensBurned(amount);
    }

    function updateRewardRate(uint256 newRate) external onlyOwner {
        rewardRate = newRate;
        emit RewardRateUpdated(newRate);
    }

    function pause() external onlyOwner {
        _pause();
    }

    function unpause() external onlyOwner {
        _unpause();
    }
}
